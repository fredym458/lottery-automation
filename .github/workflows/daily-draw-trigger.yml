name: Daily Lottery Draw Trigger

on:
  schedule:
    # TEST: Trigger every 10 minutes for testing
    - cron: '*/10 * * * *'
  workflow_dispatch: # Allows manual triggering for testing

jobs:
  trigger-draw:
    runs-on: ubuntu-latest
    
    steps:
    - name: Continuous Draw Detection and Processing
      run: |
        echo "üéØ Starting continuous draw detection at $(date)"
        
        # Get the current round first
        echo "üîó Connecting to: https://${{ secrets.REPLIT_URL }}"
        ROUND_RESPONSE=$(curl -s "https://${{ secrets.REPLIT_URL }}/api/current-round" || echo '{"error":"connection_failed"}')
        echo "üì° Round API response: $ROUND_RESPONSE"
        
        CURRENT_ROUND=$(echo "$ROUND_RESPONSE" | jq -r '.round // "unknown"' 2>/dev/null || echo "unknown")
        echo "üìä Starting round: $CURRENT_ROUND"
        
        # Check if we can connect to the app
        if [ "$CURRENT_ROUND" = "unknown" ]; then
          echo "‚ùå Failed to connect to Replit app. Check REPLIT_URL secret."
          echo "üí° Make sure your Replit app is running and accessible."
          exit 1
        fi
        
        # Maximum attempts: 30 minutes (60 checks every 30 seconds)
        MAX_ATTEMPTS=60
        ATTEMPT=1
        DRAW_PROCESSED=false
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$DRAW_PROCESSED" = false ]; do
          echo "üîç Attempt $ATTEMPT/$MAX_ATTEMPTS - Checking for draw completion..."
          
          # Trigger the automated draw detection
          RESPONSE=$(curl -s -w "%{http_code}" -X POST \
            "https://${{ secrets.REPLIT_URL }}/api/automated-draw-trigger" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DRAW_TRIGGER_SECRET }}" \
            -d '{"source": "github-actions", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'", "attempt": '$ATTEMPT'}' \
            || echo "000")
          
          # Extract HTTP code and body more safely
          if [ ${#RESPONSE} -ge 3 ]; then
            HTTP_CODE="${RESPONSE: -3}"
            BODY="${RESPONSE%???}"
          else
            HTTP_CODE="000"
            BODY="Connection failed"
          fi
          
          echo "üì° Response code: $HTTP_CODE"
          echo "üì° Response body: $BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            # Check if the response indicates success
            if echo "$BODY" | jq -e '.success == true' > /dev/null 2>&1; then
              echo "‚úÖ Draw successfully detected and processed!"
              DRAW_PROCESSED=true
              
              # Verify round advancement
              NEW_ROUND_RESPONSE=$(curl -s "https://${{ secrets.REPLIT_URL }}/api/current-round" || echo '{"round":"unknown"}')
              NEW_ROUND=$(echo "$NEW_ROUND_RESPONSE" | jq -r '.round // "unknown"' 2>/dev/null || echo "unknown")
              echo "üìä Round advanced from $CURRENT_ROUND to $NEW_ROUND"
              break
            else
              # Draw not ready yet, extract the message
              MESSAGE=$(echo "$BODY" | jq -r '.message' 2>/dev/null || echo "No message")
              echo "‚è≥ Draw not ready: $MESSAGE"
            fi
          else
            echo "‚ùå Request failed with code $HTTP_CODE"
          fi
          
          # Wait 30 seconds before next attempt (unless it's the last attempt)
          if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
            echo "‚è≥ Waiting 30 seconds before next check..."
            sleep 30
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        # Final status check
        if [ "$DRAW_PROCESSED" = true ]; then
          echo "üéâ SUCCESS: Draw was detected and processed successfully!"
        else
          echo "‚ö†Ô∏è TIMEOUT: Draw was not detected within 30 minutes"
          echo "üí° This may be normal if Chainlink VRF is experiencing delays"
          echo "üîÑ The system will retry tomorrow at the same time"
        fi
