name: Daily Lottery Draw Trigger

on:
  schedule:
    # Daily draw at 11:30 PM GMT+4 (19:30 UTC) - start 30 minutes BEFORE VRF completion at 20:00 UTC
    - cron: '30 19 * * *'
  workflow_dispatch: # Allows manual triggering for testing

jobs:
  trigger-draw:
    runs-on: ubuntu-latest
    
    steps:
    - name: Continuous Draw Detection and Processing
      run: |
        echo "🎯 Starting continuous draw detection at $(date)"
        echo "🔧 Contract: 0x821E13f7AB798c5Cb64e3b758314eCfAE4527788 (BSC Testnet)"
        echo "🎮 Production lottery system - early start to catch VRF completion within 1-hour deadline"
        echo "⏰ Expected VRF completion: 12:00 AM GMT+4 (20:00 UTC)"
        echo "⚠️ CRITICAL: Winners must be submitted within 1 hour of VRF completion!"
        
        # WAKE UP REPLIT SERVER - Multiple attempts to ensure hibernated server starts  
        echo "🔗 Connecting to: https://luckychainlottery.io"
        echo "⚡ Waking up Replit server (may be hibernated)..."
        
        # Step 1: Wake up with frontend request (30 second timeout for cold start)
        echo "🌐 Step 1: Waking up frontend..."
        curl -m 30 -s "https://luckychainlottery.io/" > /dev/null || echo "Frontend wake attempt completed"
        sleep 5
        
        # Step 2: Wake up backend with health check (30 second timeout)
        echo "⚙️ Step 2: Waking up backend..."
        curl -m 30 -s "https://luckychainlottery.io/api/current-round" > /dev/null || echo "Backend wake attempt completed"
        sleep 5
        
        # Step 3: Verify server is fully awake
        echo "🔍 Step 3: Verifying server is responsive..."
        WAKE_ATTEMPTS=0
        MAX_WAKE_ATTEMPTS=6
        
        while [ $WAKE_ATTEMPTS -lt $MAX_WAKE_ATTEMPTS ]; do
          ROUND_RESPONSE=$(curl -m 15 -s "https://luckychainlottery.io/api/current-round" 2>/dev/null || echo '{"error":"connection_failed"}')
          CURRENT_ROUND=$(echo "$ROUND_RESPONSE" | jq -r '.round // "unknown"' 2>/dev/null || echo "unknown")
          
          if [ "$CURRENT_ROUND" != "unknown" ]; then
            echo "✅ Server is awake and responsive!"
            echo "📊 Starting round: $CURRENT_ROUND"
            break
          fi
          
          WAKE_ATTEMPTS=$((WAKE_ATTEMPTS + 1))
          echo "⏳ Wake attempt $WAKE_ATTEMPTS/$MAX_WAKE_ATTEMPTS - waiting 10 seconds..."
          sleep 10
        done
        
        # Final check - exit if server never woke up
        if [ "$CURRENT_ROUND" = "unknown" ]; then
          echo "❌ Failed to wake up Replit server after $MAX_WAKE_ATTEMPTS attempts"
          echo "💡 Server may be experiencing issues. Check Replit console."
          exit 1
        fi
        
        # Maximum attempts: 90 minutes (180 checks every 30 seconds) to detect VRF completion and process within deadline  
        # Start at 19:30 UTC, detect VRF at 20:00 UTC, deadline at 21:00 UTC
        MAX_ATTEMPTS=180
        ATTEMPT=1
        DRAW_PROCESSED=false
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$DRAW_PROCESSED" = false ]; do
          echo "🔍 Attempt $ATTEMPT/$MAX_ATTEMPTS - Checking for draw completion..."
          
          # Trigger the automated draw detection
          RESPONSE=$(curl -s -w "%{http_code}" -X POST \
            "https://luckychainlottery.io/api/automated-draw-trigger" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DRAW_TRIGGER_SECRET }}" \
            -d '{"source": "github-actions", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'", "attempt": '$ATTEMPT'}' \
            || echo "000")
          
          # Extract HTTP code and body more safely
          if [ ${#RESPONSE} -ge 3 ]; then
            HTTP_CODE="${RESPONSE: -3}"
            BODY="${RESPONSE%???}"
          else
            HTTP_CODE="000"
            BODY="Connection failed"
          fi
          
          echo "📡 Response code: $HTTP_CODE"
          echo "📡 Response body: $BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            # Check if the response indicates success
            if echo "$BODY" | jq -e '.success == true' > /dev/null 2>&1; then
              echo "✅ Draw successfully detected and processed!"
              DRAW_PROCESSED=true
              
              # Verify round advancement
              NEW_ROUND_RESPONSE=$(curl -s "https://luckychainlottery.io/api/current-round" || echo '{"round":"unknown"}')
              NEW_ROUND=$(echo "$NEW_ROUND_RESPONSE" | jq -r '.round // "unknown"' 2>/dev/null || echo "unknown")
              echo "📊 Round advanced from $CURRENT_ROUND to $NEW_ROUND"
              break
            else
              # Draw not ready yet, extract the message
              MESSAGE=$(echo "$BODY" | jq -r '.message' 2>/dev/null || echo "No message")
              echo "⏳ Draw not ready: $MESSAGE"
            fi
          else
            echo "❌ Request failed with code $HTTP_CODE"
          fi
          
          # Wait 30 seconds before next attempt (unless it's the last attempt)
          if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
            echo "⏳ Waiting 30 seconds before next check..."
            
            # Keep-alive ping every 5 attempts to prevent re-hibernation
            if [ $((ATTEMPT % 5)) -eq 0 ]; then
              echo "📡 Keep-alive ping to prevent hibernation..."
              curl -m 10 -s "https://luckychainlottery.io/api/current-round" > /dev/null || echo "Keep-alive completed"
            fi
            
            sleep 30
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        # Final status check
        if [ "$DRAW_PROCESSED" = true ]; then
          echo "🎉 SUCCESS: Draw was detected and processed successfully!"
          echo "🎯 Contract: 0x821E13f7AB798c5Cb64e3b758314eCfAE4527788"
          echo "📊 Round advancement confirmed"
        else
          echo "⚠️ TIMEOUT: Draw was not detected within 30 minutes"
          echo "💡 This may be normal if Chainlink VRF is experiencing delays"
          echo "🔄 The system will retry tomorrow at the same time"
          echo "📋 Current round: $CURRENT_ROUND"
        fi
